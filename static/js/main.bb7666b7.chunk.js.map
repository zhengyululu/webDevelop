{"version":3,"sources":["Showtime.js","Todolist/Todoinput.js","Todolist/Todoing.js","Todolist/Todolist.js","index.js"],"names":["Component","Todoinput","handleInput","e","keyCode","props","add","target","value","handleChange","setState","name","parseInt","bind","state","a","b","c","console","log","this","refs","focus","ref","onKeyDown","type","onChange","inp","onClick","Todoing","delItem","idx","del","todo","map","item","key","defaultProps","Todolist","addItem","data","splice","ReactDOM","render","document","getElementById","className"],"mappings":"8PACuBA,Y,2BCGFC,E,YACjB,aAAc,IAAD,8BACT,+CAQJC,YAAc,SAACC,GAEM,KAAdA,EAAEC,SACD,EAAKC,MAAMC,IAAIH,EAAEI,OAAOC,QAZnB,EAebC,aAAe,SAACN,GACZ,EAAKO,SAAL,eACKP,EAAEI,OAAOI,KAAOC,SAA0B,KAAjBT,EAAEI,OAAOC,MAAW,EAAEL,EAAEI,OAAOC,UAf7D,EAAKN,YAAc,EAAKA,YAAYW,KAAjB,gBACnB,EAAKC,MAAQ,CACTC,EAAE,GACFC,EAAE,GACFC,EAAE,IANG,E,iFAqBTC,QAAQC,IAAIC,KAAKC,KAAKN,GACtBK,KAAKC,KAAKN,EAAEO,U,+BAEN,IAAD,OACL,OACI,6BACI,2BAAOC,IAAI,IAAIC,UAAWJ,KAAKlB,YAAauB,KAAK,SADrD,IAGI,2BAAOd,KAAK,IAAIe,SAAUN,KAAKX,aAAcD,MAAOY,KAAKN,MAAME,EAAGQ,UAAWJ,KAAKlB,YAAauB,KAAK,SAHxG,IAKI,2BAAOd,KAAK,IAAIe,SAAUN,KAAKX,aAAcD,MAAOY,KAAKN,MAAMG,EAAGO,UAAWJ,KAAKlB,YAAauB,KAAK,SALxG,IAOI,2BAAIL,KAAKN,MAAMC,EAAEK,KAAKN,MAAME,EAAEI,KAAKN,MAAMG,GAEzC,2BAAOM,IAAK,SAACI,GAAO,EAAKA,IAAIA,GAAMF,KAAK,SACxC,4BAAQG,QAAS,WAAKV,QAAQC,IAAI,EAAKQ,IAAInB,SAA3C,qB,GArCuBR,aCFlB6B,E,2MACjBC,QAAS,SAACC,EAAI5B,GACVe,QAAQC,IAAIhB,GACZ,EAAKE,MAAM2B,IAAID,I,wEAET,IAAD,OACAE,EAAQb,KAAKf,MAAb4B,KACL,OACI,6BAEQA,EAAKC,KAAI,SAACC,EAAKJ,GACf,OAAO,wBAAIK,IAAKL,GAAMI,EAAf,QAAyB,4BAAQP,QAAS,EAAKE,QAAQjB,KAAK,EAAKkB,IAAxC,yB,GAXf/B,aAqBrC6B,EAAQQ,aAAe,CACnBJ,KAAM,CAAC,EAAE,EAAE,EAAE,EAAE,I,UCnBEK,E,YACjB,aAAc,IAAD,8BACT,+CAsBJC,QAAU,SAACC,GAEP,EAAK9B,SAAS,CACVuB,KAAK,GAAD,mBAAM,EAAKnB,MAAMmB,MAAjB,CAAsBO,OA1BrB,EA6BbV,QAAU,SAACC,GAEP,IAAIE,EAAI,YAAO,EAAKnB,MAAMmB,MAC1BA,EAAKQ,OAAOV,EAAI,GAEhB,EAAKrB,UAAS,SAACI,EAAMT,GAEjB,OADAa,QAAQC,IAAIL,EAAMmB,MACX,CACHA,KAAMA,OAnCd,EAAKnB,MAAQ,CACTmB,KAAK,CAAC,EAAE,EAAE,GACVlB,EAAE,IACFC,EAAE,KALG,E,sEAiDT,OACI,6BACI,kBAAC,EAAD,CAAWV,IAAKc,KAAKmB,UACrB,kBAAC,EAAD,CAASP,IAAKZ,KAAKU,QAASG,KAAMb,KAAKN,MAAMmB,Y,GArDvBjC,aCkBtC0C,IAASC,OACL,kBAAC,EAAD,MACAC,SAASC,eAAe,SAiHlBD,SAASC,eAAe,QAK9BC,UAAY,W","file":"static/js/main.bb7666b7.chunk.js","sourcesContent":["import React,{Fragment,Component} from 'react';\r\nclass ShowTime extends Component{\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            time: new Date().toLocaleString(),\r\n            a: 100,\r\n            b: 200\r\n        }\r\n        console.log('constructor')\r\n        setTimeout(()=>{\r\n            this.setState({\r\n                time: new Date().toLocaleString()\r\n            })\r\n        },1000)\r\n    }\r\n    shouldComponentUpdate(){\r\n        if(this.state.a>10){\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n    componentDidUpdate(preProps,preState,data){\r\n        console.log('didupdate');\r\n        console.log(preState)\r\n        console.log(this.state.time)\r\n    }\r\n    getSnapshotBeforeUpdate(){\r\n        console.log('getSnapshot');\r\n        return {name: this.state.a}\r\n    }\r\n    componentDidMount(){\r\n        console.log('didmount');\r\n    }\r\n    render(){\r\n        console.log('render');\r\n        var {name,age} = this.props;\r\n        return (\r\n            <Fragment>\r\n                {/* 条件渲染 */}\r\n                {name.length>5?<div>姓名：{name}</div>:''}\r\n                {name.length>5&&<div>姓名：{name}</div>}\r\n                <div>{this.state.time}</div>\r\n                {/* 循环渲染 */}\r\n                <div>\r\n                    {\r\n                        age.map((item,index)=>{\r\n                            if(index%2 === 0){\r\n                                return <p key={index}>{item}</p>\r\n                            }\r\n                        })\r\n                    }\r\n                </div>\r\n            </Fragment>\r\n        )\r\n    }\r\n}\r\nexport default ShowTime;","import React, { Component } from 'react'\r\n// 受控组件：value值被react控制的表单元素\r\n// 可以实时获取表单元素的值（表单验证）/写法相对麻烦\r\n// \r\nexport default class Todoinput extends Component {\r\n    constructor(){\r\n        super();\r\n        this.handleInput = this.handleInput.bind(this);\r\n        this.state = {\r\n            a:'',\r\n            b:'',\r\n            c:''\r\n        }\r\n    }\r\n    handleInput = (e)=>{\r\n        // 绑定this，事件处理函数写成箭头函数，或者用bind\r\n        if(e.keyCode === 13){\r\n            this.props.add(e.target.value);\r\n        }\r\n    }\r\n    handleChange = (e)=>{\r\n        this.setState({\r\n            [e.target.name]: parseInt(e.target.value===''?0:e.target.value)\r\n        })\r\n    }\r\n    componentDidMount(){\r\n        console.log(this.refs.a);\r\n        this.refs.a.focus();\r\n    }\r\n    render() {\r\n        return (\r\n            <div>\r\n                <input ref='a' onKeyDown={this.handleInput} type=\"text\"/>\r\n                +\r\n                <input name=\"b\" onChange={this.handleChange} value={this.state.b} onKeyDown={this.handleInput} type=\"text\"/>\r\n                +\r\n                <input name=\"c\" onChange={this.handleChange} value={this.state.c} onKeyDown={this.handleInput} type=\"text\"/>\r\n                =\r\n                <p>{this.state.a+this.state.b+this.state.c}</p>\r\n                {/* 非受控组件:一次性获取或处理表单元素的值 */}\r\n                <input ref={(inp)=>{this.inp=inp}} type=\"text\"/>\r\n                <button onClick={()=>{console.log(this.inp.value)}}>提交</button>\r\n\r\n            </div>\r\n        )\r\n    }\r\n}\r\n// 受控组件：\r\n// 1、给input标签添加value属性，赋值为state的值\r\n// 2、给input标签绑定onChange事件，\r\n// 在事件处理函数中setState\r\n// 3、一个事件处理函数控制多个表单元素时，\r\n// 给input标签加上name属性,事件处理函数中写：\r\n// setState({[e.target.name]:e.target.value})","import React, { Component } from 'react'\r\nimport PropTypes from 'prop-types';\r\nexport default class Todoing extends Component {\r\n    delItem =(idx,e)=>{\r\n        console.log(e);\r\n        this.props.del(idx);\r\n    }\r\n    render() {\r\n        var {todo} = this.props;\r\n        return (\r\n            <div>\r\n                {\r\n                    todo.map((item,idx) =>{\r\n                    return <li key={idx}>{item}-----<button onClick={this.delItem.bind(this,idx)}>删除</button></li>})\r\n                }\r\n            </div>\r\n        )\r\n    }\r\n}\r\nTodoing.propTypes = {\r\n    todo: PropTypes.array,\r\n    del: PropTypes.func\r\n}\r\nTodoing.defaultProps = {\r\n    todo: [1,2,3,4,4]\r\n}","import React, { Component } from 'react'\r\nimport Todoinput from './Todoinput'\r\nimport Todoing from './Todoing'\r\nimport './todo.css';\r\n\r\nexport default class Todolist extends Component {\r\n    constructor(){\r\n        super();\r\n        this.state = {\r\n            todo:[1,2,3],\r\n            a:100,\r\n            b:200\r\n        }\r\n        // 深拷贝\\浅拷贝\r\n        // var obj = {a:100,b:[1,2,3]};\r\n        // var obj1 = {c:300};\r\n        // var o = {...obj};\r\n        // var o = Object.assign({},obj,obj1);\r\n        // 深拷贝\r\n        // var o = JSON.parse(JSON.stringify(obj));\r\n        // o.b[0] = 200;\r\n        // console.log(o===obj);\r\n        // 遍历对象\r\n        // Object.keys(obj).forEach((item)=>{\r\n        //     console.log(item)\r\n        //     console.log(obj[item])\r\n        // })\r\n\r\n    }\r\n    addItem = (data)=>{\r\n        // this.state.todo.push(data);\r\n        this.setState({\r\n            todo: [...this.state.todo,data]\r\n        })\r\n    }\r\n    delItem = (idx)=>{\r\n        // 1、不能直接改变或处理state，通过setState改变\r\n        let todo = [...this.state.todo];\r\n        todo.splice(idx,1);\r\n        // 2、setState是异步执行\r\n        this.setState((state,props)=>{\r\n            console.log(state.todo);\r\n            return {\r\n                todo: todo\r\n            }\r\n        })\r\n        // 在setState里获取state可能会出错，不是你想要的值\r\n        // 可以像上面那样，把第一个参数写成函数，解决该问题\r\n        // this.setState({\r\n        //     todo: this.state.num + 100\r\n        // },()=>{\r\n        //     console.log(this.state.todo)\r\n        // })\r\n    }\r\n    render() {\r\n        return (\r\n            <div>\r\n                <Todoinput add={this.addItem}/>\r\n                <Todoing del={this.delItem} todo={this.state.todo}/>\r\n            </div>\r\n        )\r\n    }\r\n}","import React,{Fragment,Component} from 'react';\nimport ReactDOM from 'react-dom';\nimport ShowTime from './Showtime';\nimport './index.css';\nimport Todolist from './Todolist/Todolist.js';\n// 函数声明组件\n// function ShowTime(props){\n//     console.log(props);\n//     return (<Fragment>\n//                 <div>{props.name}{props.age}</div>\n//                 <div>\n//                     {new Date().toLocaleString()}\n//                 </div>\n//             </Fragment>\n//         )\n// }\n\n\n// 组件交互\n// 父组件---->子组件：调用子组件时添加属性，子组件通过props拿到传递的数据\n// 子组件---->父组件：\n\n\nReactDOM.render(\n    <Todolist/>,\n    document.getElementById('root')\n)\n\n\n// var num = [1,2,3,4,5];\n// ReactDOM.render(\n//     <ShowTime age={num} name=\"zhangsan\"/>,\n//     document.getElementById('root')\n// )\n\n\n\n\n\n// 显示当前系统时间\n// function showTime(){\n//     var ele = <div>\n//                 <p>当前时间是：</p>\n//                 <div>{new Date().toLocaleString()}</div>;\n//             </div>;\n//     ReactDOM.render(\n//         ele,\n//         document.querySelector('#root')\n//     );\n// } \n// showTime();\n// setInterval(showTime,1000);\n\n\n\n\n\n// react技术栈\n// jsx语法\n// var ele = <h1 class=\"tit\">hello <p>react</p></h1>;\n// babel编译，返回一个对象\n// var ele = React.createElement(\n//     'h1',\n//     {id:'tit',class:'title'},\n//     'hello',\n//     React.createElement(\n//         'p',\n//         {id:'t',class:'tit'},\n//         'react')\n// );\n// ReactDOM.render(ele, document.getElementById('root'));\n// 自己封装render函数\nvar obj = {\n    type: 'div',\n    props: {\n        id: 'box',\n        class: 'box',\n        children: [\n            'hello',\n            'react',\n            {\n                type: 'h1',\n                props: {\n                    id: 'tit',\n                    class: 'tit',\n                    children: [\n                        'title',\n                        'react'\n                    ]\n                }\n            }\n        ]\n    }\n}\nfunction render(obj,container){\n    var {type,props} = obj;\n    // 文档碎片\n    var fragment = document.createDocumentFragment();\n\n    var ele = document.createElement(type);\n    for(var item in props){\n        if(item === 'class'){\n            ele.className = props[item]\n        }else if(item === 'children'){\n            for(var i=0;i<props.children.length;i++){\n                // ele.innerHTML += props.children[i];\n                if(typeof props.children[i] === 'object'){\n                    render(props.children[i],ele);\n                }else{\n                    var txt = document.createTextNode(props.children[i]);\n                    ele.appendChild(txt);\n                }\n            }\n        }else{\n            ele[item] = props[item];\n        }\n    }\n    fragment.appendChild(ele);\n    container.appendChild(fragment);\n}\n// render(obj,document.getElementById('root'));\n// 页面渲染过程\n// 请求HTML页面、浏览器HTML解析器解析html文件、生成DOM树\n// link引入css文件、css解析器解析CSS，生成CSS对象模型，CSSOM和DOM tree结合生成一个render tree，最后浏览器绘制页面\n\n// 页面回流（重排reflow）：DOM结构变化、内容变化、大小、位置的变化、显示的变化\n// 页面重绘（repaint）：颜色的变化（背景色、字体颜色、边框颜色）\n\n// 1、先用变量进行dom处理，最后一次渲染\n// console.time('time');\n// var div = document.getElementById('root');\n// var str = ''\n// for(var i=0;i<1000;i++){\n//     str += '<p>'+i+'</p>';\n// }\n// div.innerHTML = str;\n// console.timeEnd('time');\n// 2、对于样式处理,声明一个css类\nvar div = document.getElementById('root');\n// div.style.width = '100px';\n// div.style.height = '100px';\n// div.style.background = 'red';\n\ndiv.className = 'active';\n// 3、offsetLeft、offsetWidth等都会引起回流，要慎用\n// console.log(div.offsetLeft);\n// var wid = div.offsetWidth;\n// setInterval(()=>{\n//     wid += 1;\n//     div.style.width = wid + 'px';\n// },100)\n// 4、文档碎片（内存中的一个变量）"],"sourceRoot":""}